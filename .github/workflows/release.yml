name: release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  PKG_NAME: 'fs-db-cpp'
  LIB_NAME: 'libfs_db_cpp.a'
  BUILD_DIR: 'build'
  MAINTAINER: 'Zhizhchenko Gleb <zhizhchienko0162@gmail.com>'
  DESC: 'FS DB cpp client library'
  LIB_PATH: 'usr/lib/'
  INCLUDE_PATH: 'usr/include/fs_db/'

jobs:
  build-artifact:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libgrpc++-dev protobuf-compiler-grpc
          version: 1.0

      - name: Build
        run: |
          mkdir -p ${{ env.BUILD_DIR }}
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          make fs_db_cpp
      - uses: actions/upload-artifact@v4
        with:
          name: artifact-lib
          path: ${{ env.BUILD_DIR }}/${{ env.LIB_NAME }}
      - uses: actions/upload-artifact@v4
        with:
          name: artifact-inc
          path: ${{ env.BUILD_DIR }}//*.h

  build-package:
    runs-on: ubuntu-latest
    needs:
      - build-artifact
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v4
        with:
          name: artifact-lib
      - uses: actions/download-artifact@v4
        with:
          name: artifact-inc
      - name: Create dirs
        run: |
          ls ./
          mkdir -p .debian/${{ env.LIB_PATH }}
          mkdir -p .debian/${{ env.INCLUDE_PATH }}
          mkdir -p .debian/DEBIAN
          cp ${{ env.LIB_NAME }} .debian/${{ env.LIB_PATH }}
          cp *.h .debian/${{ env.INCLUDE_PATH }}
          cp inc/* .debian/${{ env.INCLUDE_PATH }}
      - uses: jiro4989/build-deb-action@v2
        with:
          package: ${{ env.PKG_NAME }}
          version: ${{ github.ref }}
          arch: 'amd64'
          maintainer: ${{ env.MAINTAINER }}
          desc: '${{ env.DESC }}'
          package_root: .debian

      - uses: actions/upload-artifact@v4
        with:
          name: artifact-deb
          path: ./*.deb

  create-release:
    runs-on: ubuntu-latest
    needs:
      - build-package
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Generate changelog
        run: |
          wget https://github.com/git-chglog/git-chglog/releases/download/0.9.1/git-chglog_linux_amd64
          chmod +x git-chglog_linux_amd64
          ./git-chglog_linux_amd64 --output ./changelog $(git describe --tags $(git rev-list --tags --max-count=1))
      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body_path: ./changelog

      - name: Write upload_url to file
        run: echo '${{ steps.create-release.outputs.upload_url }}' > upload_url.txt

      - uses: actions/upload-artifact@v4
        with:
          name: create-release
          path: upload_url.txt

  upload-package:
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: artifact-deb
      - uses: actions/download-artifact@v4
        with:
          name: create-release
      - id: vars
        run: |
          echo "::set-output name=upload_url::$(cat upload_url.txt)"
          echo "::set-output name=asset_name::$(ls *.deb | head -n 1)"
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.vars.outputs.upload_url }}
          asset_path: ${{ steps.vars.outputs.asset_name }}
          asset_name: ${{ steps.vars.outputs.asset_name }}
          asset_content_type: application/vnd.debian.binary-package